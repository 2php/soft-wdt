
(一)模块编译

方法一、单独编译

    在soft_wdt源码目录下，执行如下命令即可
    make -C /path/to/kernel/source/dir M=`pwd` modules

方法二、在Linux内核编译体系中编译

    1. 拷贝soft_wdt.c到drivers/watchdog/目录下。
    
    2. 将下面这行代码，追加到内核源码的drivers/watchdog/Makefile中(在Architecture Independant部分)
    obj-$(CONFIG_SOFT_WDT) += soft_wdt.o
    
    3. 将下面的内容追加到内核源码的drivers/watchdog/Kconfig中(在Architecture Independant部分)

config SOFT_WDT
	tristate "soft_wdt-software watchdog(support multiple dogs)"
	default m
	help
	  A software monitoring watchdog same as SOFT_WATCHDOG, 
	  but support multiple dogs. Each time, user opens the
	  device file node, a new dog was created, associated
	  with the fd returned by the open system call.

	  To compile this driver as a module, choose M here: the
	  module will be called softdog.

    4. 执行make menuconfig进入watchdog驱动程序的选择界面，然后直接退出，并保存配置。
    
    5. 执行make modules，然后在drivers/watchdog/目录下，就会生成模块文件soft_wdt.ko

(二)模块加载
    1. 使用默认参数加载(5秒超时，且看门狗不可关闭)
    insmod soft_wdt.ko

    2. 指定参数加载(12秒超时，且看门狗可关闭)
    insmod soft_wdt.ko timeout=12 nowayout=0

(三)用户态程序使用看门狗示例代码

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/ioctl.h>

#define    SOFT_WDT_DEV    "/dev/soft_wdt"

int main(int argc, char *argv[])
{
    int i;
    char buf[32];
    int  value;

    int fd=open("/dev/soft_wdt", O_WRONLY);

    if (fd < 0)
    {
        printf("open %s failed\n", SOFT_WDT_DEV);
        exit(1);
    }

    printf("open %s succeed\n", SOFT_WDT_DEV);

    /* make the dog closable. */
    write(fd, "V", 1);

    /* feed dog */
    for (i=0; i<100; i++)
    {
        write(fd, "1234", 4);
        usleep(1000000);
    }

    close(fd);
    return 0;
}
